=======================================================================================================================
@Query(value = """
    SELECT p.*
    FROM product p
    INNER JOIN category c ON p.category_id = c.category_id
    WHERE LOWER(p.product_name) LIKE LOWER(CONCAT('%', :keyword, '%'))
       OR LOWER(c.category_name) LIKE LOWER(CONCAT('%', :keyword, '%'))
    """, nativeQuery = true)
    List<Product> searchProductsByKeyword(@Param("keyword") String keyword);

				===================================Problem=========================================

SELECT * FROM product p
JOIN category c ON ...

When using SELECT * with a JOIN, both tables might have columns with the same names (like category_id, name, etc.). When JPA tries to map this result to a single entity (like Product), it gets confused because the result set has duplicate column names — hence the NonUniqueDiscoveredSqlAliasException.

				===================================Solution=========================================

SELECT p.*

This tells the query to only select columns from the product table, which match exactly with your Product entity. This way, JPA can safely map the result to Product objects because:

There's no duplication of column names (no conflict).

Only the fields defined in the Product entity are returned.	


=======================================================================================================================


Retrieving the Cart data from user id when the User class is ignore in the Class entity


@Query("SELECT c FROM Cart c WHERE c.user.id = :userId")
    Optional<Cart> findCartByUserId(@Param("userId") Integer userId);

=======================================================================================================================

Option 1: Use JPQL (Recommended)
If you want to use entity names (like CartProduct, cart, etc.), do not set nativeQuery = true.

Update the repository method like this:

@Query("SELECT cp.quantity FROM CartProduct cp WHERE cp.cart.cartId = :cartId")
int findQuantityByCartId(@Param("cartId") Integer cartId);
✅ JPQL uses entity names, not table names.
-------------------------------------------------------------------------------------------------------------------
Option 2: Fix the native query to use actual table and column names
If you still want to use native SQL, use real table/column names like this:


@Query(value = "SELECT quantity FROM cart_product WHERE cart_id = :cartId", nativeQuery = true)
int findQuantityByCartId(@Param("cartId") Integer cartId);
✅ Make sure cart_product table exists in the database.
===================================================================================================================



=============================================Stored Procedure======================================================
-----------------------------------------------------------------------------------
CREATE DEFINER=`root`@`localhost` PROCEDURE `put_cart_product`(
    IN in_product_id INT,
    IN in_product_name VARCHAR(255),
    IN in_user_id INT,
    IN in_quantity INT,
    OUT flag_product_found BOOLEAN,
    OUT deleted BOOLEAN
)
BEGIN
    DECLARE result_cart_id INT DEFAULT 0;
    DECLARE cart_product_flag INT DEFAULT 0;
    SET flag_product_found = FALSE;
    set deleted = false;
    
    IF EXISTS (
        SELECT 1 
        FROM product 
        WHERE product_id = in_product_id 
        OR product_name = in_product_name
    ) THEN
        SELECT c.cart_id 
        FROM Cart c 
        WHERE c.user_id = in_user_id 
        INTO result_cart_id;

        IF (result_cart_id IS NOT NULL AND result_cart_id > 0) THEN
		--   SET flag = TRUE;
            SELECT COUNT(*) FROM 
			cart_product cp
			INNER Join product p
			ON cp.product_id = p.product_id
			WHERE cp.cart_id = result_cart_id and p.product_name = in_product_name 
            INTO cart_product_flag;
			
            IF (cart_product_flag IS NOT NULL AND cart_product_flag > 0)
				THEN
					IF(in_quantity != 0) 
						THEN 
						UPDATE cart_product 
						SET quantity  = in_quantity
						WHERE cart_id = result_cart_id and product_id = in_product_id;
                        set flag_product_found = true;
					ELSE 
						DELETE from cart_product where cart_id = result_cart_id and product_id = in_product_id;
                        set deleted = true;
					END IF;
            ELSE 
            INSERT INTO cart_product(quantity,cart_id,product_id) values(in_quantity,result_cart_id,in_product_id);
            set flag_product_found = true;
            END IF;
            
        END IF;

    ELSE
        SET flag_product_found = FALSE;
    END IF;

END
-------------------------------------------------------------------------------
public CartDto putCart(PutCartDto cartDto) {

        Integer loggedInId = jwtUtils.getLoggedInUsername();

        StoredProcedureQuery query = entityManager.createStoredProcedureQuery("put_cart_product")
                .registerStoredProcedureParameter("in_product_id", Integer.class, ParameterMode.IN)
                .registerStoredProcedureParameter("in_product_name", String.class, ParameterMode.IN)
                .registerStoredProcedureParameter("in_user_id", Integer.class, ParameterMode.IN)
                .registerStoredProcedureParameter("in_quantity", Integer.class, ParameterMode.IN)
                .registerStoredProcedureParameter("flag_product_found", Boolean.class, ParameterMode.OUT)
                .registerStoredProcedureParameter("deleted", Boolean.class, ParameterMode.OUT);

        query.setParameter("in_product_id", cartDto.getProduct().getProductId());
        query.setParameter("in_product_name", cartDto.getProduct().getProductName());
        query.setParameter("in_user_id", loggedInId);
        query.setParameter("in_quantity", cartDto.getQuantity());
        query.execute();

        boolean flagProductFound = (boolean) query.getOutputParameterValue("flag_product_found");
        boolean deleted = (boolean) query.getOutputParameterValue("deleted");

        if (flagProductFound) {
            System.out.println("Product quantity updated");
            return new CartDto(cartDto.getProduct().getProductId(),cartDto.getProduct().getPrice(),null);
        }else {
            System.out.println("Product not found");
        }

        if (deleted) {
            System.out.println("Product deleted");
        }

        return null;
    }


==============================================================================================================================